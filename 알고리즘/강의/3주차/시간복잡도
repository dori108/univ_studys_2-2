가상 컴터에서 가상언어로 작성된 가상 코드를 실행할 때 특정 입력에 대해 수행되는 알고리즘의 수행시간은 기본연산의 횟수로 수행시간을 정의한다.
문제는 입력의 종류가 무한하므로 모든 입력에 대해 수행시간을 측정하여 평균을 구하는 것은 현실적으로 가능하지 않다는 점이다. 따라서 최악의 경우의 입력을 가정하여 최악의 경우의 입력에 대한 알고리즘의 수행시간을 측정한다.

알고리즘의 기본연산의 횟수를 센다.
방금의 n개의 정수 중 최대값을 찾는 알고리즘에서 if문의 결과에 따라 current를 바꿔주는 수행은 될 수도 안될 수도 있음
최악의 경우는 이 연산이 n번 도는 경우로, 오름차순 정렬된 배열이 들어온다면 가능하겠다.

cp 기본연산 횟수

algorithm arraySum(A,B,n)
  sum =0
  for i =0 to n-1 do
    for j = n-1 down to i do
      sum+=A[i]*B[j]
    return sum
end_algorithm

위 알고리즘의 최악의 입력에 대해 수행하는 기본연산의 횟수는 ?

간단 표기법
빅오

최악의 입력에 대한 기본연산의 횟수를 정확히 세는 것은 귀찮아
대략적인 값만 알아도 좋아
가장 큰 항을 표시해줘 

*logn 시간 알고리즘
def number_of_bits(n):
    count = 0
    while n > 0:
        n = n // 2
        count += 1
    return count


*nlogn 시간 알고리즘
힙 머지 팀 

*n 시간 알고리즘
insertion

*n^2 시간 알고리즘
algorithm array_sum(A, B, n)
  sum = 0
  for i = 0 to n - 1 do
	for j = 0 to n - 1 do
	  sum += A[i]*B[j]
  return sum
end_algorithm

이중 for문이 들어가는 순간 n^2이 넘어간다
삼중은 당연히 n^3이겠지 

재귀함수는 2^n 알고리즘
-> 매~~~우 불적절한 알고리즘 효율이 좋지 않음

예제를 통한 재귀이해(1)

예1 1부터 n까지의 합을 계산해본다
a. loop활용

def sum(n):
	s=0
	for i in range(1,n+1):
		s+=i
	return s

b. 재귀적으로 작성하기
sum(n) 
=sum(n-1) +n
=(sum(n-2)+n-1) +n

sum(1) =1 
전개 끝

def sum(n):
	if n==1:return 1
	return sum(n-1)+n

c. 수행시간
루프함수 n번 반복되고 매번 상수번의 기본 연산만을 수행O(n)
재귀함수 sum(n-1)을 계산하는 시간 + (n을 더하는 기본연산 1회)

sum(n-1)을 계산하는 시간 = sum(n-2)을 계산하는 시간 +1
...
결국 수행시간도 재귀함수로 정의해야하는데 특이한 것은 베이스를 따로 명시해줘야한다는 것이다.
마치 점화식처럼 수행시간이 나타나게된다.

점화식은 T(n)=T(n-1)+1 이다
점화식을 전개하여 n에 관한 식으로 표현하기
바닥 경우에 리를 때까지만 전개하면 된다.
결국 수행시간은 O(n)

이번에는 조금 다르게 계산을 해보자
sum(a,b)함수는 a부터 b까지 더한 값을 리턴한다(1부터 n까지 합은 sum(1,n) 호출)
a와 b의 중간 값을 m이라고 하자. (m=(a+b)/2)

재귀형식으로 정의가능
sum(a,b) = sum(a,m) + sum(m+1,b)
여기서 두번의 재귀 호출이 이루어짐
역시나 점화식은 베이스 경우가 존재 이때는 a=b인 경우가 그 경우임

a=b인 경우 그냥 a를 리턴하는 것으로 하자
sum(1,n)을 호출한 경우의 수행시간의 점화식

T(n)=2T(n/2)+c T(1)=1

def sum(n): 
	if n <= 1: return n
	return n + sum(n-1) # 재귀 호출이 한 곳에서 발생

n = int(input("n = "))
print(sum(n))


def sum(a, b): # return a + (a+1) + ... + b
	if a > b: return 0
	if a == b: return a
	m = (a+b)//2
	return sum(a, m) + sum(m+1, b) # 재귀 호출이 두 곳에서 발생

a = int(input("a = "))
b = int(input("b = "))
print(sum(a, b))

